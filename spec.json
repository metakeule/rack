{
  "OVERVIEW": {
    "UUID": "7ad64054-148f-4bb8-bdaa-86ddc37ec6d6",
    "Responsible": "metakeule",
    "Title": "rack bibliothek",
    "Text": "Inspiration:\n\n- \u003chttps://github.com/metakeule/rack\u003e\n- \u003chttps://github.com/gocraft/web\u003e\n- \u003chttps://github.com/codegangsta/martini\u003e\n- \u003chttps://github.com/gorilla/mux\u003e\n\nBenchmarks:\n\n\u003chttps://github.com/cypriss/golang-mux-benchmark\u003e",
    "Comments": {},
    "LastUpdate": "12.12.2013",
    "State": "PLANNING",
    "Deadline": "",
    "EstimatedHours": 0
  },
  "INFO": {
    "Company": "Know GmbH",
    "Project": "rack2",
    "URL": "$GOWORK/rack2",
    "Language": "de_DE",
    "DateFormat": "DD.MM.YYYY",
    "RequestedBy": [
      "metakeule"
    ],
    "Related": {},
    "Translations": {},
    "SupersededBy": {},
    "Resources": {},
    "Persons": {
      "metakeule": "Marc René Arns"
    },
    "Parent": "",
    "Approved": false
  },
  "Sections": {
    "CONTRADICTION": [],
    "DEFINITION": [],
    "FEATURE": [
      {
        "UUID": "85094389-f6ee-4f51-9edb-bf22d11669f2",
        "Responsible": "metakeule",
        "Title": "Respektiere http Verben (GET/POST usw)",
        "Text": "zur Zeit werden nur die Pfade respektiert.\n\nEs soll, ähnlich wie bei goh4 eine \"Maske\" von zweier Potenzen\ngebildet werden",
        "Comments": {},
        "LastUpdate": "12.12.2013",
        "State": "FINISHED",
        "Deadline": "",
        "EstimatedHours": 0
      },
      {
        "UUID": "7063bbfb-c049-41c7-a472-f8edfa579e9b",
        "Responsible": "metakeule",
        "Title": "URLs verwalten",
        "Text": "Folgende Features sind wichtig:\n\n\nBei Aufruf von .Handle(), .GET() usw soll eine Route zurückgeliefert\nwerden.\n\nDiese Route kann dann nach dem mounten verwendet werden, um die \ntatsächliche URL zu bekommen.\n\nAußerdem soll ein Router alle seine URLs zurückgeben können.\nAußerdem soll eine URL relativ zu einem Router abgefragt werden können.\nAußerdem brauchen wir die Möglichkeit eine URL mit Parametern zu\nfüllen (für die Platzhalter).\n\nAußerdem brauchen wir die Möglichkeit, die Parameter einer aktuellen\nURL in einem Handler zu bekommen.\n\nAußerdem brauchen wir die Möglichkeit, structs zu verwenden (mit tags),\ndie zum konstruieren einer URL befüllt werden können und in die \nParameter einer URL eingelesen werden können.",
        "Comments": {},
        "LastUpdate": "12.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      }
    ],
    "NONGOAL": [],
    "SCENARIO": [
      {
        "UUID": "bc554f46-458d-4f2e-b5bd-d86dcfe9558c",
        "Responsible": "metakeule",
        "Title": "Integration mit fat",
        "Text": "- Es soll möglich sein aus fat-Structs URLs zu generieren und\nzu extrahieren.\n\n- Es soll möglich sein, REST routen automatisch aus fat Structs zu\nerzeugen\n\n- Es soll möglich sein, Abfragen mit Paging und Sorting aus fat Structs\nzu erzeugen",
        "Comments": {},
        "LastUpdate": "09.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      },
      {
        "UUID": "ad255354-061d-473b-9d6a-f1726dadfe0f",
        "Responsible": "metakeule",
        "Title": "Integration mit net/http",
        "Text": "- Ein rack soll als http.Handler fungieren.\n- http.Handler sollen als Middleware fungieren können",
        "Comments": {},
        "LastUpdate": "09.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      },
      {
        "UUID": "d67b99da-3840-49f5-b09b-03748f537603",
        "Responsible": "metakeule",
        "Title": "Stackability / Mountability",
        "Text": "Ein Rack soll selber als Middleware in einem anderen Rack \nfungieren können, so dass die Routen angepasst werden.\n\nSo dass ein rack wie eine unabhängige App irgendwo reingemountet werden\nkann.",
        "Comments": {},
        "LastUpdate": "09.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      },
      {
        "UUID": "8352250c-f899-451f-b9f0-9d591b7744b9",
        "Responsible": "metakeule",
        "Title": "Performance",
        "Text": "rack soll mindestens so schnell sein, wie herkömmliche muxer.\nDurch verzicht auf reguläre Ausdrück soll dies möglich sein.\n\nEin benchmark, der erweitert und geteils werden könnte ist:\n\n\u003chttps://github.com/cypriss/golang-mux-benchmark\u003e\n\nFür die Performance ist ein tree-basierter Ansatz für das Routing\ninteressant. Hierbei kann man sich an \n\n\u003chttps://github.com/gocraft/web\u003e orientieren",
        "Comments": {},
        "LastUpdate": "09.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      },
      {
        "UUID": "34ffae8d-e93d-4df5-8cb7-d17738db265a",
        "Responsible": "metakeule",
        "Title": "before / after / routing middleware",
        "Text": "es soll möglich sein, middleware vor und nach dem routing zu haben, sowie\nspezielle routing middleware.\n\nes soll routing middleware geben, die nach:\n\n- schema (http/https)\n- verb (GET, POST, PUT, DELETE, PATCH, OPTIONS)\n- host\n- pfad\n\ntrennt.\n\neiniges an middleware kann vom martini-contrib repo portiert werden:\n\n\u003chttps://github.com/codegangsta/martini-contrib\u003e\n\nfür die routing middleware, die im wesentlichen filter und verteiler\ndarstellen, kann der gorilla muxer als vorbild genommen werden:\n\n\u003chttps://github.com/gorilla/mux\u003e\n\nder middleware aufruf / ansatz selbst kann von \n\n\u003chttps://github.com/metakeule/rack\u003e\n\nverwendet werden (allerdings in der richtigen reihenfolge)",
        "Comments": {},
        "LastUpdate": "11.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      },
      {
        "UUID": "783c25e3-d95f-4f35-b461-ebf81253121e",
        "Responsible": "metakeule",
        "Title": "context",
        "Text": "es soll möglich sein, context zwischen middlewares, routen usw. zu teilen.\n\nIdeen für die Teilung von context können bei martinis service injection\ngenommen werden:\n\n    Handlers are invoked via reflection. Martini makes use of Dependency \n    Injection to resolve dependencies in a Handlers argument list\n    \nsiehe \u003chttps://github.com/codegangsta/martini\u003e",
        "Comments": {},
        "LastUpdate": "09.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      },
      {
        "UUID": "b274e146-c0f1-4db8-ad2a-3e8a2c72d0f0",
        "Responsible": "metakeule",
        "Title": "integration mit muxer aus net/http package",
        "Text": "Es sollten standart muxer und server aus dem net/http packet integriert\nwerden können. ebenso soll ein rack als standart muxer verwendet \nwerden können",
        "Comments": {},
        "LastUpdate": "09.12.2013",
        "State": "AGREED",
        "Deadline": "",
        "EstimatedHours": 0
      }
    ],
    "UNDECIDED": [
      {
        "UUID": "736e5d84-b4b1-4468-a2ab-c1f04750acb8",
        "Responsible": "metakeule",
        "Title": "Mögliches Design für rack",
        "Text": "Da der net/http.Handler ohnehin ein interface ist, ist es denkbar, dass\nman die \"Services\" à la martini einfach als Structs und die Middlewares\nals Methoden setzt. Um dann an den Context zu kommen wird getypecastet.\n\nDer Handler wird nur durchgereicht und hält alle Kontexte.\n\nTypische Kontexte werden parallel zu Middleware in einem extra Repository\nbereitgestellt. Der eigentliche Handler erbt von diesen ganzen Kontexten.",
        "Comments": {},
        "LastUpdate": "09.12.2013",
        "State": "PLANNING",
        "Deadline": "",
        "EstimatedHours": 0
      }
    ]
  }
}
